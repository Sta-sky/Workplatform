# -*- coding: utf-8 -*-
"""
Django settings for Workplatform project.

Generated by 'django-admin startproject' using Django 1.11.8.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
from datetime import timedelta

from celery.schedules import crontab

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '&q57r%299rfoy2$93*6rh$&xc3j!7ia4f)pj2_ris8=sabj%u$'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

SERIP127 = '127.0.0.1'

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework_swagger',
    "channels",
    "djcelery",
    'rest_framework',
    'corsheaders',
    'user',
    'taskmanage',
    "back_log",
    "mind",
    "webscanApp",
    "adminq",
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Workplatform.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'BuleSword/templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Workplatform.wsgi.application'

CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_ALLOW_ALL = True
# CORS_ORIGIN_WHITELIST = ()

CORS_ALLOW_METHODS = (
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
    'VIEW',
)
X_FRAME_OPTIONS = 'ALLOWALL'

XS_SHARING_ALLOWED_METHODS = ['POST', 'GET', 'OPTIONS', 'PUT', 'DELETE']
CORS_ALLOW_HEADERS = (
    'XMLHttpRequest',
    'X_FILENAME',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'token',
    'X-Frame-Options'
)
# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases
mysql_username = "root"
mysql_pwd = "123456"
db = "bluesword"
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': db,
        'HOST': '127.0.0.1',
        'USER': 'root',
        'PORT': 3306,
        'PASSWORD': mysql_pwd,

    }
}

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'zh-Hans'
TIME_ZONE = 'Asia/Shanghai'
USE_I18N = True
USE_L10N = True
USE_TZ = False

# 笔记、文件页面默认的最大展示数量  不可修改
PAGE_DEFAULT_MAX_COUNT = 10

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'

# 配置浏览器访问文件的地址：http://127.0.0.1:8000/media/
MEDIA_URL = '/media/'

# 配置文件存储目录
MEDIA_FILE = os.path.join(BASE_DIR, 'media/file')

JWT_TOKEN_KEY = 'anxun_lanjian'

# 任务进度
DEFAULT_PROCESS = '0-0-0-0-0-0-0'

DJREIDS_IP = 'redis://@' + SERIP127 + ':6379/'

# django_redis缓存配置
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': DJREIDS_IP + '6',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'CONNECTION_POOL_KWARGS': {"max_connections": 100}
        }
    },
    'user': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': DJREIDS_IP + '7',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    },
    'task': {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": DJREIDS_IP + '8',
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient"

        }
    },
    'note': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': DJREIDS_IP + '9',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    },
    'back': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': DJREIDS_IP + '10',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    },
    'mind': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': DJREIDS_IP + '11',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    },
}
ASGI_APPLICATION = 'Workplatform.routing.application'
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": ["redis://127.0.0.1:6379", ],
        },
    },
}
REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.AutoSchema'
}

import djcelery

djcelery.setup_loader()

#
# CELERY_QUEUES = {
#     'beat_tasks': {
#         'exchange': 'beat_tasks',
#         'exchange_type': 'direct',
#         'binding_key': 'beat_tasks'
#     },
#     'work_queue': {
#         'exchange': 'work_queue',
#         'exchange_type': 'direct',
#         'binding_key': 'work_queue'
#     }
# }


CELERY_IMPORTS = (
    'mind.tasks',
    'adminq.tasks'
)
# CELERY_DEFAULT_QUEUE = 'work_queue'

#  有些情况下可以防止死锁
CELERYD_FORCE_EXECV = True

#  设置并发的worker数量
CELERYD_CONCURRENCY = 4

# 允许重试
CELERY_ACKS_LATE = True

#  每个worker最多执行100个任务被销毁，可以防止内存泄漏
CELERYD_MAX_TASKS_PER_CHILD = 100

#  单个任务的最大运行时间，超过就杀死
CELERYD_TASK_TIME_LEMIT = 12 * 30

#  定时任务
CELERYBEAT_SCHEDULE = {
    'task1': {
        'task': 'update',
        'schedule': timedelta(seconds=5),  # 每5秒执行一次
    }
}


BROKER_BACKEND = 'redis'
BROKER_URL = 'redis://127.0.0.1:6379/14'
CELERY_RESULT_BACKEND = 'redis://127.0.0.1:6379/15'
